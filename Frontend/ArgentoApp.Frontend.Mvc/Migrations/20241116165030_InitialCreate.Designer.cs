// <auto-generated />
using System;
using ArgentoApp.Frontend.Mvc.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArgentoApp.Frontend.Mvc.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241116165030_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("ArgentoApp.Frontend.Mvc.Data.Entities.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Description = "Sistemdeki her türlü işi yapmaya yetkili rol",
                            Name = "Super Admin",
                            NormalizedName = "SUPER ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Description = "Sistemdeki yönetimsel işleri yapmaya yetkili rol",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            Description = "Müşterilerin rolü",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("ArgentoApp.Frontend.Mvc.Data.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3b67be4-0ecb-4f6a-a9df-f0e323f7c068",
                            Email = "denizcoban@example.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            LastName = "Çoban",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZCOBAN@EXAMPLE.COM",
                            NormalizedUserName = "DENIZCOBAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAHmUTa7kK8UydAHaze7v9YgTr+g0YXJaLS/Os85WJDjn76++PmDDpEqmi75+0EBqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe067a6e-ec4a-4dfe-ab95-f55cc72764c5",
                            TwoFactorEnabled = false,
                            UserName = "denizcoban"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17d3539e-4014-4333-a4be-41a645054bb2",
                            Email = "sedenkaban@example.com",
                            EmailConfirmed = true,
                            FirstName = "Seden",
                            LastName = "Kaban",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEDENKABAN@EXAMPLE.COM",
                            NormalizedUserName = "SEDENKABAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBjDNTdsSVSlFP+ziX0vED9RQtdW9OgVAD9e6eNPE04mTF7rNYiSyESi/erVY38SAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2925e40a-f5dd-4852-b5b2-828990eb71b8",
                            TwoFactorEnabled = false,
                            UserName = "sedenkaban"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ea7662d-c695-4a4c-8a7c-b1d6c8d8fc17",
                            Email = "kemalcandan@example.com",
                            EmailConfirmed = true,
                            FirstName = "Kemal",
                            LastName = "Candan",
                            LockoutEnabled = false,
                            NormalizedEmail = "KEMALCANDAN@EXAMPLE.COM",
                            NormalizedUserName = "KEMALCANDAN",
                            PasswordHash = "AQAAAAIAAYagAAAAELmreHHFbqCg3D1isOk/8RYfk8N7SPsiocvjpiGpG6lE7tp6IpYiM0x0ig8buelyGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb04a6be-015b-45d8-87be-6dcb8e0dae9d",
                            TwoFactorEnabled = false,
                            UserName = "kemalcandan"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "286d7417-5d90-4120-817f-7f99ec7fabff",
                            Email = "berfukeloglan@example.com",
                            EmailConfirmed = true,
                            FirstName = "Berfu",
                            LastName = "Keloğlan",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERFUKELOGLAN@EXAMPLE.COM",
                            NormalizedUserName = "BERFUKELOGLAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEIgVZDS2DGMBHewf/tgcomPPDm5mukYr/k5eDpfNK05QOImrSE1I5CBxtsOh0/dywQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "188b28a5-2079-4370-85fa-b85ad28f891c",
                            TwoFactorEnabled = false,
                            UserName = "berfukeloglan"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50ef1d10-391c-40d9-9b7e-9503132e52b5",
                            Email = "cantan@example.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            LastName = "Tan",
                            LockoutEnabled = false,
                            NormalizedEmail = "CANTAN@EXAMPLE.COM",
                            NormalizedUserName = "CANTAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMX5GdLEYnCAYRpm4GkDblZIFqAfCJ1O9taabSa8v1VK/2O3Y6HD6YyAbqTsnzTlSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2fe3fdc4-1563-4593-b0d5-e43e21f06c11",
                            TwoFactorEnabled = false,
                            UserName = "cantan"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb862177-ccd9-412b-abbd-da893aabfa7b",
                            Email = "mugepor@example.com",
                            EmailConfirmed = true,
                            FirstName = "Müge",
                            LastName = "Por",
                            LockoutEnabled = false,
                            NormalizedEmail = "MUGEPOR@EXAMPLE.COM",
                            NormalizedUserName = "MUGEPOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEDLIZfMAr9oMx6vvUkN8NRocS3dxO9gXMiGxqaeWhZSsXSUSG5lVux6uOgj1jriEKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ad9f2ad-c704-4dbd-850c-b861fe1e74a6",
                            TwoFactorEnabled = false,
                            UserName = "mugepor"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ArgentoApp.Frontend.Mvc.Data.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ArgentoApp.Frontend.Mvc.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ArgentoApp.Frontend.Mvc.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ArgentoApp.Frontend.Mvc.Data.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArgentoApp.Frontend.Mvc.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ArgentoApp.Frontend.Mvc.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
